<!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>蛇年快乐！</title>    <style>        /* 重置默认样式，使用 border-box 盒模型 */        * {            margin: 0;            padding: 0;            box-sizing: border-box;        }        /* 页面主体样式，居中并隐藏溢出内容 */        body {            display: flex;            justify-content: center;            align-items: center;            height: 100vh;            overflow: hidden;            background-color: #000;        }        /* 画布样式，覆盖整个页面 */        canvas {            position: absolute;            width: 100%;            height: 100%;            pointer-events: none;        }        /* 控制面板中的按钮样式 */      .button-container {            display: flex;            flex-direction: column;            gap: 10px;        }      .play-button {            padding: 10px 20px;            border: none;            border-radius: 5px;            background-color: #4CAF50;            color: white;            cursor: pointer;        }      .play-button.hidden {            display: none!important;        }      .message-popup {            color: white;            font-size: 20px;            margin-bottom: 10px;        }      .message-popup.hidden {            display: none!important;        }      .blessing-popup {            position: absolute;            top: 50%;            left: 50%;            transform: translate(-50%, -50%);            color: white;            font-size: 24px;            background-color: rgba(0, 0, 0, 0.7);            padding: 20px;            border-radius: 10px;            text-align: center;        }      .blessing-popup.hidden {            display: none!important;        }      .input-container {            display: flex;            gap: 10px;        }      .custom-input {            padding: 10px;            border: none;            border-radius: 5px;        }    </style></head><body>    <!-- 控制面板，包含各种按钮和消息 -->    <div id="controlPanel">        <div class="message-popup hidden" id="niceMessage">希望 2025 年对你好一点哦！</div>        <div class="message-popup hidden" id="startMessage">开启 2025 年啦，祝你好运连连！</div>        <div class="input-container">            <input type="text" placeholder="输入你的期待" class="custom-input" id="userInput">            <button class="play-button" id="submitButton" aria-label="提交期待">提交</button>        </div>        <button class="play-button hidden" id="startButton" aria-label="开始 2025 年">开启 2025 年</button>        <button class="play-button" id="playMusicButton" aria-label="播放音乐">播放音乐</button>        <button class="play-button" id="pauseMusicButton" aria-label="暂停音乐">暂停音乐</button>    </div>    <!-- 用于绘制背景的画布 -->    <canvas id="backgroundCanvas" class="hidden"></canvas>    <!-- 用于绘制雪花的画布 -->    <canvas id="mainCanvas" class="hidden"></canvas>    <!-- 用于绘制永久烟花的画布 -->    <canvas id="permanentFireworkCanvas" class="hidden"></canvas>    <!-- 音频元素，包含多种音频格式，自动播放，初始隐藏 -->    <audio id="fireworkSound" class="hidden">        <source src="audio/久石譲 - Summer.mp3" type="audio/mpeg">        <source src="audio/久石譲 - Summer.ogg" type="audio/ogg">        <source src="audio/久石譲 - Summer.wav" type="audio/wav">    </audio>    <!-- 新增的祝福语悬浮窗元素 -->    <div class="blessing-popup hidden" id="blessingPopup"></div>    <script>        document.addEventListener('DOMContentLoaded', () => {            // 祝福语内容            const blessing = `新的一年来喽！愿你在《无畏契约》中似灵蛇般灵动自如，技能释放精妙绝伦，枪枪爆头，以神级操作精准破局，一路连胜，迅速冲上高分段。同时，现实生活里也好运爆棚，万事顺遂！`;            // 获取 DOM 元素            const submitButton = document.getElementById('submitButton');            const startButton = document.getElementById('startButton');            const niceMessage = document.getElementById('niceMessage');            const startMessage = document.getElementById('startMessage');            const backgroundCanvas = document.getElementById('backgroundCanvas');            const bgCtx = backgroundCanvas.getContext('2d');            const mainCanvas = document.getElementById('mainCanvas');            const mainCtx = mainCanvas.getContext('2d');            const permanentFireworkCanvas = document.getElementById('permanentFireworkCanvas');            const permanentFireworkCtx = permanentFireworkCanvas.getContext('2d');            const fireworkSound = document.getElementById('fireworkSound');            const playMusicButton = document.getElementById('playMusicButton');            const pauseMusicButton = document.getElementById('pauseMusicButton');            const blessingPopup = document.getElementById('blessingPopup');            const userInput = document.getElementById('userInput');            // 存储烟花对象的数组            let fireworks = [];            // 存储雪花对象的数组            let snowflakes = [];            // 上一次创建烟花的时间            let lastFireworkTime = 0;            // 上一次创建雪花的时间            let lastSnowflakeTime = 0;            // 烟花创建间隔，根据窗口宽度调整            let fireworkInterval = 500;            if (window.innerWidth < 600) {                fireworkInterval = 1000;            }            // 雪花创建间隔            const snowflakeInterval = 50;            // 粒子对象池            let particlePool = [];            // 根据窗口大小调整画布尺寸            function resizeCanvas(canvas1, canvas2, canvas3) {                let width = window.innerWidth;                let height = window.innerHeight;                const minWidth = 320;                const minHeight = 480;                if (width < minWidth) {                    width = minWidth;                }                if (height < minHeight) {                    height = minHeight;                }                const maxWidth = 1920;                const maxHeight = 1080;                if (width > maxWidth) {                    width = maxWidth;                }                if (height > maxHeight) {                    height = maxHeight;                }                canvas1.width = width;                canvas1.height = height;                canvas2.width = width;                canvas2.height = height;                canvas3.width = width;                canvas3.height = height;            }            // 监听窗口大小变化，调整画布尺寸            window.addEventListener('resize', () => {                resizeCanvas(backgroundCanvas, mainCanvas, permanentFireworkCanvas);            });            // 烟花类            class Firework {                constructor() {                    // 根据屏幕宽高比设置初始位置                    let screenRatio = window.innerWidth / window.innerHeight;                    this.x = Math.random() * backgroundCanvas.width * (screenRatio > 1.5? 0.8 : 0.5);                    this.y = backgroundCanvas.height;                    this.targetY = Math.random() * backgroundCanvas.height / 2;                    this.speed = Math.random() * 6 + 3;                    this.angle = -Math.PI / 2 + (Math.random() - 0.5) * Math.PI / 6;                    this.particles = [];                    this.exploded = false;                    this.color = `hsl(${Math.random() * 360}, 100%, 50%)`;                }                // 更新烟花位置和状态                update() {                    if (!this.exploded) {                        this.x += Math.cos(this.angle) * this.speed;                        this.y += Math.sin(this.angle) * this.speed;                        if (this.y <= this.targetY) {                            this.explode();                        }                    }                    for (let i = this.particles.length - 1; i >= 0; i--) {                        this.particles[i].update();                        if (this.particles[i].isDead()) {                            this.particles.splice(i, 1);                        }                    }                }                // 烟花爆炸，创建粒子                explode() {                    this.exploded = true;                    const particleCount = 200;                    for (let i = 0; i < particleCount; i++) {                        const angle = Math.random() * 2 * Math.PI;                        const speed = Math.random() * 4 + 1;                        // 给粒子添加初始颜色和最终颜色                        const startColor = `hsl(${Math.random() * 360}, 100%, 50%)`;                        const endColor = `hsl(${Math.random() * 360}, 100%, 20%)`;                        this.particles.push(getParticleFromPool(this.x, this.y, startColor, endColor, angle, speed));                    }                }                // 绘制烟花                draw(ctx) {                    if (!this.exploded) {                        ctx.beginPath();                        ctx.arc(this.x, this.y, 3, 0, Math.PI * 2);                        ctx.fillStyle = this.color;                        ctx.fill();                    }                    for (let i = 0; i < this.particles.length; i++) {                        if (!this.particles[i].isDead()) {                            this.particles[i].draw(ctx);                        }                    }                }            }            // 烟花粒子类            class Particle {                constructor(x, y, startColor, endColor, angle, speed) {                    this.x = x;                    this.y = y;                    this.startColor = startColor;                    this.endColor = endColor;                    this.alpha = 1;                    this.decay = Math.random() * 0.015 + 0.005;                    this.size = Math.random() * 3 + 1;                    this.life = 100;                    this.ax = (Math.random() - 0.5) * 0.1;                    this.ay = 0.05;                    this.vx = Math.cos(angle) * speed;                    this.vy = Math.sin(angle) * speed;                }                // 更新粒子位置和属性                update() {                    this.vx += this.ax;                    this.vy += this.ay + 0.098; // 模拟重力加速度 9.8m/s²                    // 模拟空气阻力，假设阻力与速度成正比                    this.vx *= 0.99;                    this.vy *= 0.99;                    this.x += this.vx;                    this.y += this.vy;                    this.alpha -= this.decay;                    this.life--;                }                // 绘制粒子                draw(ctx) {                    ctx.save();                    let color = this.startColor;                    if (this.endColor) {                        // 线性插值计算颜色                        let r = Math.floor(parseInt(this.startColor.match(/\d+/)[0]) * (1 - this.alpha) + parseInt(this.endColor.match(/\d+/)[0]) * this.alpha);                        let g = Math.floor(parseInt(this.startColor.match(/\d+/)[1]) * (1 - this.alpha) + parseInt(this.endColor.match(/\d+/)[1]) * this.alpha);                        let b = Math.floor(parseInt(this.startColor.match(/\d+/)[2]) * (1 - this.alpha) + parseInt(this.endColor.match(/\d+/)[2]) * this.alpha);                        color = `rgb(${r},${g},${b})`;                    }                    ctx.fillStyle = color;                    ctx.globalAlpha = this.alpha;                    ctx.beginPath();                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);                    ctx.fill();                    ctx.restore();                }                // 判断粒子是否已死亡                isDead() {                    if (this.alpha <= 0 || this.life <= 0) {                        particlePool.push(this);                        return true;                    }                    return false;                }            }            // 雪花类            class Snowflake {                constructor() {                    this.x = Math.random() * mainCanvas.width;                    this.y = Math.random() * mainCanvas.height;                    // 正态分布的速度                    this.speed = (Math.random() + Math.random() + Math.random()) / 3 * 1 + 0.5;                    this.size = (Math.random() + Math.random() + Math.random()) / 3 * 3 + 1;                    this.opacity = Math.random() * 0.5 + 0.5;                    this.wind = Math.random() * 0.5 - 0.25;                    this.rotation = Math.random() * 360;                    this.rotationSpeed = Math.random() * 1 - 0.5;                }                // 更新雪花位置和旋转                update() {                    this.y += this.speed;                    // 更复杂的风的模型，例如根据时间和位置改变风的速度和方向                    this.x += this.wind * Math.sin(Date.now() / 1000);                    this.rotation += this.rotationSpeed;                    this.opacity = 0.5 + 0.5 * Math.sin(Date.now() / 1000); // 闪烁效果                    if (this.y > mainCanvas.height) {                        this.y = -this.size;                        this.x = Math.random() * mainCanvas.width;                    }                    if (this.x > mainCanvas.width || this.x < 0) {                        this.x = Math.random() * mainCanvas.width;                    }                }                // 绘制雪花                draw(ctx) {                    ctx.save();                    ctx.globalAlpha = this.opacity;                    ctx.translate(this.x, this.y);                    ctx.rotate(this.rotation * Math.PI / 180);                    ctx.fillStyle = `rgba(255, 255, 250, ${this.opacity})`;                    if (Math.random() > 0.5) {                        // 绘制六边形雪花                        ctx.beginPath();                        for (let i = 0; i < 6; i++) {                            ctx.lineTo(this.size * Math.cos(i * Math.PI / 3), this.size * Math.sin(i * Math.PI / 3));                        }                        ctx.closePath();                    } else {                        // 绘制圆形雪花                        ctx.beginPath();                        ctx.arc(0, 0, this.size, 0, Math.PI * 2);                    }                    ctx.fill();                    ctx.restore();                }            }            // 从对象池获取粒子            function getParticleFromPool(x, y, startColor, endColor, angle, speed) {                if (particlePool.length > 0) {                    let particle = particlePool.pop();                    particle.x = x;                    particle.y = y;                    particle.startColor = startColor;                    particle.endColor = endColor;                    particle.alpha = 1;                    particle.decay = Math.random() * 0.015 + 0.005;                    particle.size = Math.random() * 3 + 1;                    particle.life = 100;                    particle.ax = (Math.random() - 0.5) * 0.1;                    particle.ay = 0.05;                    particle.vx = Math.cos(angle) * speed;                    particle.vy = Math.sin(angle) * speed;                    return particle;                } else {                    return new Particle(x, y, startColor, endColor, angle, speed);                }            }            // 创建对象的辅助函数            function createObjects(objects, interval, lastTime, objectClass) {                const currentTime = Date.now();                if (currentTime - lastTime > interval) {                    objects.push(new objectClass());                    return Date.now();                }                return lastTime;            }            // 动画循环函数            function animate() {                if (bgCtx && mainCtx && permanentFireworkCtx) {                    permanentFireworkCtx.clearRect(0, 0, permanentFireworkCanvas.width, permanentFireworkCanvas.height);                    bgCtx.fillStyle = 'rgba(0, 0, 0, 0.2)';                    bgCtx.fillRect(0, 0, backgroundCanvas.width, backgroundCanvas.height);                    lastFireworkTime = createObjects(fireworks, fireworkInterval, lastFireworkTime, Firework);                    for (let i = fireworks.length - 1; i >= 0; i--) {                        fireworks[i].update();                        if (fireworks[i].exploded && fireworks[i].particles.length === 0) {                            fireworks.splice(i, 1);                        } else {                            fireworks[i].draw(bgCtx);                        }                    }                    mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height);                    lastSnowflakeTime = createObjects(snowflakes, snowflakeInterval, lastSnowflakeTime, Snowflake);                    for (let i = snowflakes.length - 1; i >= 0; i--) {                        snowflakes[i].update();                        snowflakes[i].draw(mainCtx);                    }                }                requestAnimationFrame(animate);            }            // 显示开始按钮            function showStartButton() {                startButton.classList.remove('hidden');                niceMessage.classList.remove('hidden');                setTimeout(() => {                    niceMessage.classList.add('hidden');                }, 1000);            }            // 开始2025年的操作            function start2025() {                if (!bgCtx ||!mainCtx ||!permanentFireworkCtx) {                    console.error('无法获取画布上下文，动画无法启动');                    return;                }                const inputText = userInput.value;                const customBlessing = inputText? `2025年，${inputText}。同时，愿你在《无畏契约》中似灵蛇般灵动自如，技能释放精妙绝伦，枪枪爆头，以神级操作精准破局，一路连胜，迅速冲上高分段。现实生活里也好运爆棚，万事顺遂！` : blessing;                // 将祝福语设置到悬浮窗                blessingPopup.innerHTML = `2025年蛇年快乐<br><br>${customBlessing.replace(/\n/g, '<br>')}`;                blessingPopup.classList.remove('hidden');                startButton.classList.add('hidden');                startMessage.classList.remove('hidden');                backgroundCanvas.classList.remove('hidden');                mainCanvas.classList.remove('hidden');                permanentFireworkCanvas.classList.remove('hidden');                fireworkSound.classList.remove('hidden');                resizeCanvas(backgroundCanvas, mainCanvas, permanentFireworkCanvas);                animate();                setTimeout(() => {                    startMessage.classList.add('hidden');                }, 3000);                setTimeout(() => {                    blessingPopup.classList.add('hidden');                }, 8000);            }            // 兼容性处理requestAnimationFrame            (function () {                let lastTime = 0;                const vendors = ['ms', 'moz', 'webkit', 'o'];                for (let x = 0; x < vendors.length &&!window.requestAnimationFrame; ++x) {                    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];                    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];                }                if (!window.requestAnimationFrame)                    window.requestAnimationFrame = function (callback, element) {                        const currTime = new Date().getTime();                        const timeToCall = Math.max(0, 16 - (currTime - lastTime));                        const id = window.setTimeout(function () { callback(currTime + timeToCall); }, timeToCall);                        lastTime = currTime + timeToCall;                        return id;                    };                if (!window.cancelAnimationFrame)                    window.cancelAnimationFrame = function (id) {                        clearTimeout(id);                    };            })();            // 为提交按钮添加点击事件            submitButton.addEventListener('click', showStartButton);            // 为开始按钮添加点击事件            startButton.addEventListener('click', start2025);            // 为播放音乐按钮添加点击事件            playMusicButton.addEventListener('click', () => {                fireworkSound.play();            });            // 为暂停音乐按钮添加点击事件            pauseMusicButton.addEventListener('click', () => {                fireworkSound.pause();            });            // 页面加载时显示开始按钮            showStartButton();        });    </script></body></html>